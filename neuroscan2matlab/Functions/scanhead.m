function [va,text,data,style]=scanhead(var,filen,dataw);
%SCANHEAD General part of the NeuroScan header.
%	[VA,TEXT,DATA,STYLE]=SCANHEAD(VAR,FILEN,DATAW) Variable names,
%	helptext, data from file and stylestring for fread are returned.
%	After last headerfield reserved10, there are elect_pos (electrode 
%	position), data_pos (data position), event_pos (events position) and 
%	datas (data size). They have (*) at the end of 	helptext. Reserved
%	variables have * as helptext. From eventtable is returned TeegType,
%	size, offset.
%
%  If var=(1,:) all matched data will be listed otherwise only first
%	match and if no macth then text, data=[] and va=var(i,:). Lines
%	starting with * or " are no match. If variables has same string
%	many times only first will be returned.
%
%  Without file will data=[position size1], electpos etc. -1. If dataw
%  given dataw will be written into file otherwise data will be read. 
%
%DIAGNOSTICS
%	Writing works only into existing files. Can be considered as a slow
%	functions.
%
%SEE ALSO
%	Uses putstr, fpos. See also scanelec, scaneven, loadcnt.
%
%EXAMPLES
%	[v,t]=scanhead([]);     % list of all variables
%	subplot(211);plottext(v);
%                               % load 17 first from file 
%	[v1,t1,data,st]=scanhead(v(1:17,:),'testec.cnt');
%	subplot(212);plottext(tiestr(['=';'{';'}'],v1,data,t1));

%Mention source when using or modifying these Shareware tools
%JVIR, Jussi.Virkkala@occuphealth.fi
%JVIR,  3-Feb-1999 Modified for PCWIN Matlab 5.2.

%	J.Virkkala 22-Jun-94
%	J.Virkkala 22-Feb-95 File as fid or name.
%	J.Virkkala  2-Mar-95 Part of ScanUtil.
%	J.Virkkala 17-May-95 New examples in scanhead, scanelec, scanhead.

%*** DEFINING TABLES ***
%ERP HEADER SIZE, -1 size/position calculated
HEAD_SIZE=[20
1
20
20
20
20
20
20
2
1
1
20
20
20
20
10
12
115
2
2
2
2
2
3
1
2
8
111
4
4
4
4
351
4
18
4		% EventTablePos
2
4		% Channel Offset
4
-1		% extra records
-1
1
4
4
-1
-1];

%ERP HEADER FREAD
HEAD_FREAD=str2mat('char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'short',...
'char');
HEAD_FREAD=str2mat(HEAD_FREAD,'char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'char',...
'short');
HEAD_FREAD=str2mat(HEAD_FREAD,'short',...
'short',...
'short',...
'short',...
'char',...
'char',...
'ushort',...
'double',...
'char');
HEAD_FREAD=str2mat(HEAD_FREAD,'float',...
'float',...
'float',...
'float',...
'char',...
'ulong',... 
'char',...
'ulong',... 	% NeuroSoft manuals state long
'char');	% Channeloffset
HEAD_FREAD=str2mat(HEAD_FREAD,'ulong',...	
'char',...
'pos',...
'pos',...
'int8',...
'long',...
'long',...
'pos',...
'cal');

%ERP HEADER VARIABLES
HEAD_VAR=str2mat('rev',...
'type',...
'id',...
'oper',...
'doctor',...
'referral',...
'hospital',...
'patient',...
'age',...
'sex');
HEAD_VAR=str2mat(HEAD_VAR,'hand',...
'med',...
'classif',...
'state',...
'label',...
'date',...
'time',...
'reserved4',...
'compsweeps');
HEAD_VAR=str2mat(HEAD_VAR,'acceptcnt',...
'rejectcnt',...
'pnts',...
'nchannels',...
'reserved5',...
'variance',...
'rate',...
'scale',...
'reserved6');
HEAD_VAR=str2mat(HEAD_VAR,'dispmin',...
'dispmax',...
'xmin',...
'xmax',...
'reserved7',...
'NumSamples',...
'reserved8',...
'EventTablePos',...
'reserved9');
HEAD_VAR=str2mat(HEAD_VAR,'ChannelOffset',...
'reserved10',...
'elect_pos',...	% Derived records
'data_pos',...
'TeegType',...
'size',...
'offset',...
'event_pos',...
'datas');

%ERP HEADER TEXT
HEAD_TEXT=str2mat('Revision string',...
'File type AVG=1, EEG=0',...
'Patient ID',...
'Operator ID',...
'Doctor ID',...
'Referral ID',...
'Hospital ID',...
'Patient name',...
'Patient Age',...
'Patient Sex Male=''M'', Female=''F''');
HEAD_TEXT=str2mat(HEAD_TEXT,'Handedness Mixed=''M'',Rt=''R'', lft=''L''',...
'Medications',...
'Classification',...
'Patient wakefulness',...
'Session label',...
'Session date string',...
'Session time string',...
'*',...
'Number of actual sweeps');
HEAD_TEXT=str2mat(HEAD_TEXT,'Number of accepted sweeps',...
'Number of rejected sweeps',...
'Number of points per waveform',...
'Number of active channels',...
'*',...
'Variance data included flag',...
'D-to-A rate',...
'scale factor for calibration',...
'*');
HEAD_TEXT=str2mat(HEAD_TEXT,'Display minimum (Yaxis)',...
'Display maximum (Yaxis)',...
'X axis minimum (epoch start)',...
'X axis maximum (epoch stop)',...
'*',...
'Number of samples',...
'*',...		% EventTablePos
'Position of event',...					
'*');		% ChannelOffset
HEAD_TEXT=str2mat(HEAD_TEXT,'Block size, SYNAMPS',...	
'*',...	
'NC*75;%Electrode position (*)',...
'FL-900-NC*75-ES-9;% data position (*)',...
'Event table tag type',...
'Size of eventtable',...
'Relative file position',...
'0;%Events position (*)',...
'(FL-ES-9-900-NC*75)/NC/2;% data size (*)');

%*** DEFINING VARIABELS ***
n_var=size(var,1);		% how many variables are asked
if n_var==0;n_var=1;var=' ';every=1;else;every=0;end;
n_hea=size(HEAD_VAR,1);		% how many variables there are 
va='';
text='';
data=[];
style='';
min=1;

%*** FILE DEPENDING POSITIONS ***
temp_size=HEAD_SIZE;
if nargin>1;			% can also be as 
%*** FILENUMBER OR NAME AS PARAMETER ***
  if isstr(filen),
    if nargin>2,		% reading or writing
      file=fopen(filen,'w','l');
    else
      file=fopen(filen,'r','l');
    end;
  else
    file=filen;
  end;
  if file==-1,errorr('hff','scanhead');break;end
  FL=0;NC=0;ES=0;
	% file length
  fseek(file,0,1);      FL=ftell(file);
	% number of channels
  if FL>370;
    fseek(file,370,-1) ;NC=fread(file,1,'short');
	% eventtable position
    if FL>886;
    fseek(file,886,-1) ;ES=fread(file,1,'ulong');
	% eventtable size
      if FL>ES+1;
         fseek(file,ES+1,-1);ES=fread(file,1,'ulong');
      end;
    end;
  end;
  temp=find(HEAD_SIZE==-1);
  for i=1:size(temp,1);
    row=HEAD_TEXT(temp(i),:);
	% text has size function, see earlier 
    eval(['temp_size(temp(i),1)=' row(1:find('%'==row)-1)]);
	% size is replaced
  end;
end;

%*** MAIN PART ***
not_found=ones(n_hea,1);
for i=1:n_var; 		% asked variables
  j=find(not_found);	
  j=j(1)-1;	
  if n_var>1;p=i;else;p=1;end;
  found=0;
% if command or text line
  if find(var(i,1)==['#','"']);j=n_hea;end;
  while j<n_hea,   	% until found, all done
    showwait;
    j=j+1;
% if is found
    if every==1|~isempty(findstr(deblank(var(i,:)),HEAD_VAR(j,:))),
% variable name
      va=putstr(HEAD_VAR(j,:),va,p);
      if nargout>1;
% help text, if % then only end of text
        row=HEAD_TEXT(j,:);
        tmp=find('%'==row);
        if size(tmp,2)>0;row=row(1,tmp(1)+1:size(row,2));end;
        text=putstr(deblank(row),text,p);
	if nargout>2;	% if data wanted
	   style_numb=deblank(HEAD_FREAD(j,:));
           if j==1;pos=0;else;pos=sum(temp_size(1:j-1,1));end;
	   length=temp_size(j);
           if nargin==1;
	     data(p,1:2)=[pos,length];
           else;
% winds file to right position, see fpos
             fpos(file,pos)
             if nargin==2;
% reading from file, scanf for characters and fread for numbers
               if strcmp(style_numb,'char');
                 row=fscanf(file,'%c',length);
               else       
% if style is pos then returning file position, electrodes, events
               if strcmp(style_numb,'pos');
                 row=sprintf('%1.0f',ftell(file));
               else;  
                 if strcmp(style_numb,'cal');
                   row=sprintf('%1.0f',length);
                 else
% to text format depending, HOW MANY DECIMALS
                   if findstr(style_numb,['double','float']);st='%1.3f';
                     else st='%1.0f';end;
                   row=sprintf(st,fread(file,1,style_numb)); 
                 end;
	       end;		% style_numb='pos'
               end;		% style_numb='char'
               data=putstr(row,data,p);
             else;
               row=deblank(dataw(i,:));
% writing to file, fprintf for characters and fwrite for numbers
               if strcmp(style_numb,'char');
                 if size(row)<length,row(1,length)=' ';
                   else if size(row)>length;row=row(1,1:length);end;end;
                 fprintf(file,'%c',row);
               else
% position fields cann't be written
                 if ~strcmp(style_numb,'pos');
                   value=eval(row);
                   fwrite(file,value,style_numb);
                 end;                
               end;
             end; 		% nargin==2        
           end; 		% nargin==1
% returning stylestrings if nargout 
           if nargout>3;style=putstr(style_numb,style,p);end;
  	end; 		% nargout>2
      end; 		% nargout>1 
% don't have to go through everything
     not_found(j)=0;
     found=1;
% all matched / first matched
     if n_var==1;p=p+1;else;j=n_hea;end;
    end; 			% if every1|found
  end; 				% while 
% if data is not found / comment line
  if found==0;
     va=putstr(var(i,:),va,p);
     text=putstr(' ',text,p);
     data=putstr(' ',data,p);
  end;
end; 				% for i=

%*** FILENUMBER OR NAME AS PARAMETER ***
if nargin>2,
  if isstr(filen);
    fclose(file)
  end
end;

%END OF SCANHEAD